-------
  Q's
-------

1. What are the two parts of a class, as described in the chapter?

2. What is the difference between the interface and the implementation in a class?

3. What is a struct?

4. Why are constructors used?

5. What is an invariant?

6. When should functions be put in the class definition (inline-function), and when should they be defined outside the class? Why?

7. When should operator overloading be used in a program?

8. Why should the public interface to a class be as small as possible?

9. What does adding const to a member function do?

10. Why are helper functions/convience functions/auxillary functions best placed outside the class definition?

11. What is an enum class? An enumerator?

-------
  A's
-------

1. A class has data members which define the representation of an object of the class. The representation is that a type knows how to represent
   the data needed in an object. The data members make up the implementation of a class.
   A class has function members which provide the operations on the objects. The operations are that a type knows what operations can be applied to objects
   Function members make up the interface of a class.
   
2. The interface is the part of the class's declaration that its users access directly. The implementation is the part of the class's declaration that its
   users access only indirectly through the interface. The interface is identified by the public access specifier and the implementation is identified 
   by the private access specifier but members are private by default so you only really need to define public.
   
3. A struct is a class where members are public by default. Use structs if you're just working with data that logically belongs together and doesn't need to
   be protected. Usually, just data members + constructor. Data members can take any value.
   
4. Constructors are used for initialization, validation by establishing an invariant, and instantiation of an object. 

5. An invariant is a valid condition/state of an object that must be established by the constructor. A rule for what constitutes a valid value.

6. In-line functions should be placed in the class definition only if they are less than 5 lines of code.

7. Operator overloading should be used when we want to provide conventional notation for a type. Use only if you're certain it will make a big
   positive change in your code.

8. A small interface is easy to learn and easy to remember and when something is wrong it makes it easier to pinpoint where the problem is.

9. Adding const to a member function prevents modification of the object.

10. Helper functions take arguments of the classes that they are helpers of. Functions that are just useful and can be implemented as a freestanding
    function should be implemented outside the class. That way, a bug in that function cannot directly corrupt the data in a class object.

11. An enum (an enumeration) is a user-defined type that specifies a set of values (its enumerators) as symbolic integral constants.
    enum class Name{ body ... };
    Accessed using scope resolution operator: Name::enumerator
    if we don't initialize the enumerators the count begins at 0
    

1) namespace Name{}
2) enum class{};
3) class {}; // contains only members that initialize object
   class Invalid {};
   private:
   data members
   public:
   constructors
   nonmodifying operations
   modifying operations
4) helper functions
   bool is_valid(Class obj...);
   operator overloading functions
   ClassObj function() // returns object
   any other enum class
