-----
Terms
-----
   
1. program - a set of instructions written by a programmer for the computer to execute

2. source code - the .cpp or .h file that contains code for a program

3. object code - object code is source code translated into machine code by a program called a compiler

4. translation units - source code and object code that must be compiled

5. compiler - C++ is a compiled language. Meaning that in order to get a program to run, it must first be translated into something
   a machine can understand. That translation is done by a program called the compiler. The compiler also checks program for
   syntax and type errors.

6. linker - after compilation the resulting object code files still need to go through one more process called linking which is carried out
   by a program called a linker. The linkers links the translation units together (object code) to create an executable (.exe file).

7. executable - nonportable .exe file created by the the linker containing the set of instructions for a computer to execute

8. // - double slash and /* */ stand for comments. Comments are ignored by the compiler and are written to describe what the program is intended
   to do and clarify anything that isn't clear with code.
   
9. function - a named sequence of instructions for the computer to execute in the order in which they are written. 
   Has 4 parts: return type, name, parameter list, body enclosed in a set of curly braces which lists the actions called statements that the
   function is to perform.
   
10. main() - main is a function that must be included in every C++ program. The computer searches for main because it is the point of program execution

11. library - a library is code written by someone else. STL is written by Alex Stepanov and it contains algorithms, containers, etc.

12. #include - a directive, tells the computer to make available the facilities to the right of it.
    Facilities meaning something that was designed to serve a specific function.
    #include <iostream> is a preprocessor directive.

13. cout - character output stream, terminated with a newline character

14. output - output is created using cout and the insertion operator

15. << - the insertion operator used in conjunction with cout to create output

16. '\n' - newline character created by hitting the Enter key

17. statement - a part of a C++ program that isn't a directive or preprocessor directive and is terminated by a semicolon.
    Semicolons let the compiler know where one statement ends and the next begins. Basically, put a semicolon after every expression that
    doesn't end with a right curly brace or let the compiler help you out.

18. compile-time error - a syntax error, type error

------------------
Comment Guidelines
------------------
- name of the program
- the purpose of the program
- who wrote this and when
- version numbers
- what complicated code fragments are supposed to do
- what the general design ideas are
- how the source code is organized
- what assumptions are made about inputs
- what parts of the code are still missing and what cases are still not handled
