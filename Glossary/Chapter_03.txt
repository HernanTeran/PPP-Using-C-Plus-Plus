1. value - a literal according to type, a set of bits memory interpreted according to a type. A bit is a unit of comuter memory that can hold
   the value 0 or 1.

2. type - a type defines a set of possible values and a set of operations for an object. The compiler remembers the type of each variable and makes
          sure that you use it according to its type.

3. object - a region in memory that has a type which dictates what type of information can go in it

4. name - an identifier for a statement/object necessary to access an object
           
5. variable - a named object that has a specific type

6. built-in types - 8 bits in a byte
                    int stands for integer, holds unsigned values meaning + or -, size is 4 bytes
                    double stands for double precision floating-point numbers, holds unsigned values, size is 8 bytes
                    char stands for character, enclosed in single quotes, holds alpha, digit, special characters, size is 1 byte
                    bool stands for boolean, represents either true or false, or 1 or 0, size is 1 byte
 
 7. user-defined types - class
                         struct
                         enum
                         string holds a sequence of characters, enclosed in double quotes, size depends on total characters used
                         vector holds objects, size depends

8. declaration - type and name is provided for an object but no memory is set aside for it because it is uninitialized

9. operator - used for operations (+, -, *, /)

10. initialization - providing an initial value for an object. Best if using the list-based notation known as universal and uniform initialization with { }

11. definition - a declaration of type name for an object and initialization of the object with a value

12. assignment - assigning a new value to an initialized variable by using the assignment operator ( = )

13. cin - character input stream used for retrieving user input. useful for int and double. use cin.get() for char and getline(cin, var) for string

14. >> - extraction operator reads according to the type of variable you read into.

15. operation - a computation or expression made to get a result

16. concatenation - the joining of strings using the + and += operators

17. type safety - an object is type-safe when it is used only according to the rules for their type. The most important form of type safety is
    initialization. + avoidance of narrowing conversion

18. conversion - char to int (add letter to 0), int to char (32-126) according to the ASCII table

19. narrowing - a narrowing conversion, produces a loss information by trying to fit a type's size into another that is too small to hold it.
    Use {} to initialize it prevents narrowing conversion. Specifically, it is called list-based notation and it is known as the universal and uniform initialization.
    double to int truncates meaning it rounds down.

---------
operators
---------
int (arithmetic/composite assignment)       + - / * % ++ -- += -= *= /= %= 
double (arithmetic/composite assignment)    + - / * ++ -- += -= *= /=
string (concatenation/member functions)     + +=

----------------
identifier rules
----------------
first character is lowercase letter
upper/lower case letters
camelCase
snake_case
can use underscores
no other characters
meaningful
