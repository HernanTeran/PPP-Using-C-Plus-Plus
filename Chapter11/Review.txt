-------
  Q's
-------

1. What does the notation << hex do?

2. What are hexadecimal numbers used for in computer science? Why?

3. Name some of the options you may want to implement for formatting integer output.

4. What is a manipulator?

5. What is the prefix for decimal? For octal? For hexadecimal?

6. What is the default output format for floating-point values?

7. What is a field?

8. Explain what setprecision() and setw() do.

9. What is the purpose of file open modes?

10. Which of the following manipulators does not "stick": hex, scientific, setprecision(), showbase, setw?

11. What is the difference between character I/O and binary I/O?

12. Give an example of when it would probably be beneficial to use a binary file instead of a text file.

13. Give two examples where a stringstream can be useful.

14. What is a file position?

15. What happens if you position a file position beyond the end of file?

16. When would you prefer line-oriented input to type-specific input?

17. What does isalnum(c) do?

-------
  A's
-------

* use std::hex, std::oct

1. hex << outputs a hexadecimal

2. Hexadecimal is popular for outputting hardware-related information. A hexadecimal digit represents a 4-bit value so 2 = 1 byte.

3. hex << or oct << or dec <<
   These do not output values. Instead, they inform the stream that any further integer values should be displayed as specified.
   oct, hex, and dec all "stick" until told otherwise

4. A manipulator are terms like hex and oct that are used to change the behavior of a stream. showbase and noshowbase are manipulators.

5. oct: 0
   hex: 0x
   dec: no prefix

6. defaultfloat or general format is the default format and it "sticks". Otherwise there is fixed and scientific.

7. The equivalent mechanism of fixed and scientific for integer values. 

8. setprecision() is a manipulator that sets the precision of a floating-point value.
   setw() specifies how many character positions an integer value or string value will occupy using the "set field width" manipulator.

9. By default ifstream opens its file for reading and an ofstream opens its file for writing. 
   ios_base::app    append, add to the end of the file
   ios_base::ate    "at end" open and seek to end
   ios_base::binary   binary mode - beware of system-specific behavior
   ios_base::in     for reading
   ios_base::out    for writing
   ios_base::trunc    truncate file to 0 length
   -Examples-
   ofstream ofs{name, ios_base::app}; // useful for writing log files
   fstream fs{"myfile", ios_base::in | ios_base::out}; // '|' means bitwise or operator
   if (!fs) // error
   stick to istream and ostream

10. setw() doesn't stick

11. By default, iostreams deal with character representations; that is, an istream reads a sequence of characters and turns it into an object
    of the desired type. An ostream takes an object of a specified type and transforms it into a sequence of characters which it writes out.
    Binary I/O is the request to istream and ostream to simply copy bytes to and from files by using ios_base::binary.
    When reading (from a vector) bytes do:
    for (int x; ifs.read(as_bytes(x), sizeof(int));) {v.push_back(x);}
    When writing (from a vector) bytes do:
    for (int x : v) {ofs.write(as_bytes(x), sizeof(x));}
    Binary I/O doesn't use the <<, >> operators.
    The as_bytes() function is needed to get the address of the first byte of an object's representation.
    
12. It would be beneficial to use a binary file for an image or sound file because there is no reasonable character representation.
    They are both basically just a bag of bits.
    I/O is portable and binary is not.
    
13. You can use string as the source of an istream or the targest for an ostream. An istream that reads from a string is called
    istringstream and an ostream that stores characters written to it in a string is called an ostringstream.
    An istringstream is useful for extracting numeric values from a string:
    double str_to_double(string s)
    {
        istringstream is{s};
        double d{0};
        is >> d;
        if (!is) // error
        return d;
    }
    An ostringstream is useful for concatenation:
    ostringstream name;
    name << "myfile" << name << ".log";
    ofstream logfile{name.str()};
    
14. Every file that is open for reading has a read/get position and every file that is open for writing has a write/put position.
    fs.seekg(5); // read and increment reading position and then cout
    fs.seekp(1); // move writing position to 1 and then write to it and increment writing position
    There is no run-time error checking when you use positioning so avoid.

15. eof() state

16. Line-oriented input uses getline(cin, str) to differentiate between spaces and terminating whitespace character. Useful for text
    communication like in a game. cin.get() reads a single character into its argument.
    -Example-
    string command;
    getline(cin, command);
    
    stringstream ss{command};
    vector<string> words;
    for (string s; ss >> s; ) {words.push_back(s);}
    
    -Character classification-
    isspace(c)
    isalpha(c)
    isdigit(c)
    isxdigit(c) hexadecimal
    isupper(c)
    islower(c)
    isalnum(c) letter or decimal digit
    iscntrl(c) a control character
    ispunct(c) punctuation
    isprint(c) is printable
    toupper(c) // pass-by-ref
    tolower(c) // pass-by-ref

17. returns true/false if it is a letter or decimal digit

cin.unsetf(ios::dec)
cin.unsetf(ios::oct)
cin.unsetf(ios::hex)

Decimal   0-9
          base-10

Octal   digits that start with 0
        0-7
        base-8

Hexadecimal   hexadecimal digits that start with 0x or 0X
              0-9, a-f, A-F (actually 0-15 / 16 values)
              (Ex: 0X7B = 7*16+11 = 123(decimal))
              base-16
              
Binary    a series of binary digits starting with 0b or 0B
          0, 1
          base-2

* single quotes can be used to separate large numbers (Ex: 1'000'000)
* a suffix of u or U makes an integer literal unsigned
* l or L makes an integer literal long (Ex: 10u, 123456UL)

--------------------------------------------------------------------------------------------------------
Hexadecimal and binary
--------------------------------------------------------------------------------------------------------
hex       0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
binary    0000  0001  0010  0011  0100  0101  0110  0111  1000  1001  1010  1011  1100  1101  1110  1111
--------------------------------------------------------------------------------------------------------
