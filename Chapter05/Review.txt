-------
  Q's
-------

1. Name four major types of errors and briefly define each one.

2. What kinds of errors can we ignore in student programs?

3. What guarantees should every completed project offer?

4. List three approaches we can take to eliminate errors in programs and produce acceptable software.

5. Why do we hate debugging?

6. What is a syntax error? Give five examples.

7. What is a type error? Give five examples.

8. What is a linker error? Give three examples.

9. What is a logic error? Give three examples.

10. List four potential sources of program errors discussed in the text.

11. How do you know if a result is plausible? What techniques do you have to answer such questions?

12. Compare and contrast having the caller of a function handle a run-time error vs. the called function's handling the run-time error.

13. Why is using exceptions a better idea than returning an "error value"?

14. How do you test if an input operation succeeded?

15. Describe the process of how exceptions are thrown and caught.

16. Why, with a vector called v, is v[v.size()] a range error? What would be the result of calling this?

17. Define pre-condition and post-condition; give an example. Preferably, a computation that requires a loop.

18. When would you not test a pre-condition?

19. When would you not test a post-condition?

20. What are the steps in debugging a prorgram?

21. Why does commenting help when debugging?

22. How does testing differ from debugging?

-------
  A's
-------

1. Compile-time errors: syntax and type errors found by the compiler.
   Link-time errors: errors found by the linker when it is trying to combine object files into an executable program.
   Run-time errors: error found by the computer software/hardware, by a library, or user code.
   Logic errors: errors found by the programmer looking for the causes of erroneous results.
   
2. Student program's don't need to be concerned with run-time errors because they deal with the hardware/operating system.

3. Basic professionalism is to make sure that valid inputs produce logical results and that they give reasonable error messages for
   all illegal inputs. Otherwise, they don't need to be considered with misbehaving software, misbehaving hardware, and are 
   allowed to terminate after finding an error.

4. Organize software to minimize errors, eliminate most of the errors through debugging and testing, and make sure the remaining errors
   are not serious.

5. Debugging can take a long time especially if a program is written poorly.

6. Syntax are errors come from lines of code that isn't written according to the C++ grammar.
   Int x{0}; // capitalized i in int
   int x{'0}; // a quote mark inside the initializer list
   int %x{ger}; // invalid name and invalid value
   int x{0} // missing semicolon
   int x{0; // missing curly brace
   
7. Type errors are errors reported after syntax errors. They occur due to function identifier misspellings, wrong number of arguments,
   and incorrect type of value used as an argument.
   int x = arena(3); // misspelled area - undeclared function
   int x = area(fert); // incorrect type used for argument
   int x = b; // b == string so incorrect type assigned
   int x = area(3, 4); // incorrect amount of arguments
   int x = area(6); // incorrect total amount of arguments
   
8. Linker errors occur due to errors in translation units. These can come from missing function declarations/definitions in the 
   translation unit it was used and missing header files.
   Missing header files
   Missing function definitions
   A function that is defined more than once in a program

9. A logic error occurs from programmer mistakes. For example, a bad computation, misuse of a function, or a corner of code you forgot to cover.

10. Poor specification: inadequate error messages, poor orgranization
    Incomplete programs: know when we have handled all cases
    Unexpected arguments: invalid function argument
    Unexpected input: wrong type of input was read. For example: cin >> int reads a string
    Unexpected state: Incorrect or incomplete data in data structures like vectors
    Logical errors: errors produced by the programmer
    
11. A result is plausible if it abides by math, physics, and logic.


12. If the caller deals with errors then it leads to messy code due to a bunch of if/else statements, potential use of magic constants, and
    potentially leaving corners uncovered because you'd have to test for a whole bunch of cases. If the callee deals with errors then the code
    is neater because the error-checking code is in one place. Checking your arguments within the function is better than creating test functions
    because it saves on performance and memory. 

13. Returning an error value is bad because that forces all parts of a program to check for that value and adjust accordingly. Exeptions function
    through the fundamental idea of seperating error detection from the handling of an error while ensuring that the detected error can't be ignored.
    The detection of an error should be done in a called function. The handling of an error should be done in the calling function. The basic way
    to use exceptions is to create an empty exception class like class Bad_Area(); this makes an object of type Bad_Area that is thrown. Throw the
    exception in the called function, use a try-block and catch the exception object in main.
    
14. You can test for success by writing if (cin) or if (!cin) and by using exceptions.

15. Exception classes can be created or exceptions that already exist like out_of_range_ or runetime_error can be used. Then the the exception is
    thrown in the called function. In the callee function (main) a try-block is implemented with a catch block as well. The catch block
    catches the exception by reference and uses cerr to output an error message. 
    
16. You can't index into the "last" element of a vector because it doesn't exist. It's [v:v). The code would produce a subscript out of range error,
    or off-by-one error, and a bounds error because the index was not within the limits of the vector.
    
17. A pre-condition is a requirement of a function upon its argument. It must be true for the function to perform its action correctly. A post-condition is
    the return value and assuring that it is correct.

18. Sometimes writing a pre-condition can take more work than executing the function. It can be expensive in memory, therefore, in this case
    pre-conditions should be written as a comment. 

19. You would not test a post-condition if it can be stated as a comment.

20. Get the program to compile, get the program to link, and get the program to do what is is supposed to do.

21. Commenting helps with debugging because as documentation it can help pinpoint where the error came from.

22. Debugging is the process of finding and removing errors, whereas, testing is the systemic process of searching for errors.

------------------
Comment Guidelines
------------------
- name of the program
- the purpose of the program
- who wrote this and when
- version numbers
- what complicated code fragments are supposed to do
- what the general design ideas are
- how the source code is organized
- what assumptions are made about inputs
- what parts of the code are still missing and what cases are still not handled
