-------
  Q's
-------
1. What is meant by the term prompt?

2. Which operator do you use to read into a variable?

3. If you want the user to input an integer value into your program for a variable named number, what are two lines of code you could write to ask the user to do it
   and to input the value into your program?
   
4. What is \n called and what purpose does it serve?

5. What terminates input into a string?

6. What terminates input into an integer?

7. How would you write:
   cout << "Hello, ";
   cout << first_name;
   cout << "!\n";
   
   as a single line of code?
   
8. What is an object?

9. What is a literal?

10. What kinds of literals are there?

11. What is a variable?

12. What are typical sizes for a char, an int, a bool, and a double?

13. What measures do we use for the size of small entities in memory such as ints and strings?

14. What is the difference between = and ==?

15. What is a definition?

16. What is an initialization and how does it differ from an assignment?

17. What is string concatenation and how do you make it work in C++?

18. What are some good rules for choosing names?

19. What is type safety and why is it important?

20. Why can conversion from double to int be a bad thing?

21. Define a rule to help decide if a conversion from one type to another is safe or unsafe.

-------
  A's
-------
1. A prompt is issued to the user using cout and it is meant to get the user's input

2. >> the extraction operator

3. cout << (prompt), cin >> variable;

4. \n means newline and it creates a newline

5. strings are terminated by whitespace 

6. integer input is terminated by non-integer input such as hitting the enter key or '|'

7. std::cout << "Hello, << first_name << "!\n";

8. An object is a region in memory with a type that specifies what information can be placed in it

9. A literal is the literal value of an object based on type

10. int, double, string, char

11. a variable is a named object

12. char(1), int(4), double (8), bool(1), string(depends on number of characters in it +1 for whitespace '\0')

13. Bits and bytes are used to measure size. There are 8 bits in 1 byte.

14. = is the assignment operator and == is the equals operator

15. A definition is a statement that introduces a new name into a program and sets aside memory for a variable through initialization

16. Initialization is giving an object an initial value once it is defined (Use { }). Assignment is giving an object a new value after initialization (Use =)

17. String concatenation is the joining of two strings by using the + and += operators

18. The first character should be a letter, must contain alphabetical characters, or digits, or an underscore, and no other characters

19. Type safety is initialization of objects and avoiding the conversion of data types. It is important because it prevents errors

20. A conversion from double to int is called a narrowing conversion because double has 8 bytes and an int has 4 bytes the sizes conflict

21. char & int conversion is safe as long as it is based off of the ASCII table. int to double is safe as long as its whole numbers like 2 -> 2.0

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Terms
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

1. value - a literal according to type, a set of bits memory interpreted according to a type. A bit is a unit of comuter memory that can hold
   the value 0 or 1.

2. type - a type defines a set of possible values and a set of operations for an object. The compiler remembers the type of each variable and makes
          sure that you use it according to its type.

3. object - a region in memory that has a type which dictates what type of information can go in it

4. name - an identifier for a statement/object necessary to access an object
           
5. variable - a named object that has a specific type

6. built-in types - 8 bits in a byte
                    int stands for integer, holds unsigned values meaning + or -, size is 4 bytes
                    double stands for double precision floating-point numbers, holds unsigned values, size is 8 bytes
                    char stands for character, enclosed in single quotes, holds alpha, digit, special characters, size is 1 byte
                    bool stands for boolean, represents either true or false, or 1 or 0, size is 1 byte
 
 7. user-defined types - class
                         struct
                         enum
                         string holds a sequence of characters, enclosed in double quotes, size depends on total characters used
                         vector holds objects, size depends

8. declaration - type and name is provided for an object but no memory is set aside for it because it is uninitialized

9. operator - used for operations (+, -, *, /)

10. initialization - providing an initial value for an object. Best if using the list-based notation known as universal and uniform initialization with { }

11. definition - a declaration of type name for an object and initialization of the object with a value

12. assignment - assigning a new value to an initialized variable by using the assignment operator ( = )

13. cin - character input stream used for retrieving user input. useful for int and double. use cin.get() for char and getline(cin, var) for string

14. >> - extraction operator reads according to the type of variable you read into.

15. operation - a computation or expression made to get a result

16. concatenation - the joining of strings using the + and += operators

17. type safety - an object is type-safe when it is used only according to the rules for their type. The most important form of type safety is
    initialization. + avoidance of narrowing conversion

18. conversion - char to int (add letter to 0), int to char (32-126) according to the ASCII table

19. narrowing - a narrowing conversion, produces a loss information by trying to fit a type's size into another that is too small to hold it.
    Use {} to initialize it prevents narrowing conversion. Specifically, it is called list-based notation and it is known as the universal and uniform initialization.
    double to int truncates meaning it rounds down.

---------
operators
---------
int (arithmetic/composite assignment)       + - / * % ++ -- += -= *= /= %= 
double (arithmetic/composite assignment)    + - / * ++ -- += -= *= /=
string (concatenation/member functions)     + +=

----------------
identifier rules
----------------
first character is lowercase letter
upper/lower case letters
camelCase
snake_case
can use underscores
no other characters
meaningful

++n   prefix operator adds 1 to n
n++   postifx operator adds n to 1 after the line where n++ is used
{} is called list-based notation and is used for universal and uniform initialization
