-------
  Q's
-------

1. What is a computation?

2. What do we mean by inputs and outputs to a computation? Give examples.

3. What are the three requirements a programmer should keep in mind when expressing computations?

4. What does an expression do?

5. What is the difference between a statement and an expression?

6. What is an lvalue? List the operators that require an lvalue. Why do these operators, and not the others, require an lvalue?

7. What is a constant expression?

8. What is a literal?

9. What is a symbolic constant and why do we use them?

10. What is a magic constant? Give examples.

11. What are some operators that we can use for integers and floaing-point values?

12. What operators can be used on integers but not on floating-point numbers?

13. What are some operators that can be used for strings?

14. When would a programmer prefer a switch-statement to an if-statement?

15. What are some common problems with switch-statements?

16. What is the function of each part of the header line in a for-loop, and in what sequence are they executed?

17. When should the for-loop be used and when should the while-loop be used?

18. How do you print the numeric value of a char?

19. Describe what the line char foo(int x) means in a function definition?

20. When should you define a seperate function for part of a program? List reasons.

21. What can you do to an int that you cannot do to a string?

22. What can you do a string that you cannot do to an int?

23. What is the index of the third element of a vector?

24. How do you write a for-loop that prints every element of a vector?

25. What does vector<char>alphabet(26); do?

26. Describe what push_back() does to a vector.

27. What does vector's member size() do?

28. What makes vector so popular/useful?

29. How do you sort the elements of a vector?

-------
  A's
-------

1. Computation is taking input to produce output/a result.

2. Input is built up through data structures like functions which produces a result. This result eventually becomes external output.

3. The three requirements a programmer should keep in mind are that it's our job to express computations correctly, simply, and efficiently.

4. An expression computes a value from a number of operands using operators. The simplest expression is a literal.

5. A statement does not return a result but have side effects. Expressions return values. There are expression statements, declaration
   statements, selection statements, and iteration statements.

6. An lvalue is the variable, the name assigned to the object. The assignment operator, insertion/extraction, and composite assignment operators
   require an lvalue because they operate based off of assignment/initialization. 
   
7. Constant expressions are symbolic constants, a named object that you can't give a new value after it has been initialized. There are two types.
   constexpr - must be known at compile time / const - value is known at run time
   
8. A literal is the literal value of a type.

9. Symbolic constants, constexpr/const, are used to give a meaningful name to a constant and protect it from modification.

10. Magic constants are non-obvious literals (not including 0 or 1). Basically, ints or double not assigned to a variable.

11. ( + - * / ) and the conditional/logical operators

12. ( % ) the remainder/modolo operator won't work on floating point numbers. The / division operator truncates the result of double/int division.

13. ( + += ) for concatentation and the conditional/logical operators

14. Use a switch-statement if you're testing for more than 2 conditions. A switch-statement provides code that is easier to understand.

15. Some common problems with switch-statements are forgetting to terminate a case with a break statement, using a variable as a case label,
    trying to switch on a non-constant value, and writing case labels that aren't distinct.
    
16. for(loop variable, loop condition, loop increment/decrement) - execute the body starting at the control variable, incrementing/decrementing
    the variable if it meets the loop condition.
    
17. Use a for-loop if there is an initializer, loop condition, and increment operator otherwise use a while-loop.

18. Add 0 to the char variable/literal or assign the char variable to an int variable.

19. A function with a return value of type char that uses an int argument to as its numeric value to get the char value.

20. Functions make computation logically seperate from the rest of the program, makes the program text clearer especially because
    the computation is given a name, makes it possible to reuse the function in more than one place, and eases testing.

21. You can perform arithmetic operations with an int and use the remainder operator.

22. You can perform concatenation and use the string member functions with a string.

23. 2 because counting begins at 0 in C++

24. for (const auto& e : v) { cout << e << '\n'; } - range-for-loop

25. It allocates memory space for 26 chars.

26. push_back() pushes an element at the end of a vector.

27. size() returns the total count of elements in the vector.

28. Vectors are easy to use, you don't need to specify the size(length) of a vector in advance, and you can add as many elements as you like.

29. You sort a vector by using the sort algorithm from the C++ standard library. std::sort(v.begin(), v.end());

---------------------------------------
Terms
---------------------------------------
1. abstraction - hide details that we don't need to use a facility behind a convenient and general interface. How we use memory through typed/named variables.

2. computation - using input to get a result/output

3. conditional statement - an if-statement or switch-statement or loop condition

4. declaration - a function prototype - returnType name(parameter list);

5. definition - function definition containing the block of code that performs a computation

6. divide and conquer - to take a big problem and divide into chunks to ease the problem solving process

7. else - used in conjunction with an if statement that executes an action if the if-statement condition is false

8. expression - a statement that uses operands and operators for computation, returns a value

9. for-statement - best choice for iteration due to clarity.
   for (control variable; loop condition; increment/decrement) { body; }

10. range-for-statement - a short hand for-statement best used on containers like vectors to perform quick operations
    for (type temp : container) { body }

11. function - a sequence
    type name(parameter list) { body }

12. if-statement - used for selection between 2 or 3 choices.
    if (expression) { // do this; }
    else if (expression) { // do this; }
    else (expression) { // do this; }

13. increment - ++ used to add 1 to an int/double. In this chapter it's used to increment a loop variable.

14. input - an expression used to produce a result, an operand

15. iteration - doing something several times to a series of elements of a data structure

16. loop - the action of

17. lvalue - the variable, what's on the left of an expression, the name of an object

18. member function - a function belonging to a class/struct

19. output - the result of a computation

20. push_back() - one of vector's member functions used to store a new element at the end of the vector

21. repetition - doing something several times and iteration is repetition to a series of elements of a data structure

22. rvalue - the literal/value of an object, what's on the right of an expression

23. selection - usage of if-statement or switch-statement to make a selection based on conditions

24. size() - one of vector's member functions returning the total count of elements it holds

25. sort() - an STL algorithm that sorts a container

26. statement - expression statements, declarations, iteration statements, selection statements

27. switch-statement - used for selection, prefer over if-statement, only works with int, enum, and char const values, you cannot use
    variables as case labels, you can use several case labels for a single case, don't forget to use break.
    switch (value)
    {
        case //:
        // do this;
        break;
        default:
        // do this
        break;
    }

28. vector - a sequential container that stores data based off of the declared type. Sequential because it stores elements in the order that they were stored.
    vector<type> name;
    vector<type> name(n); allocate memory for n objects
    vector<type> name{x, n, y}; initialize vector with objects
    
29. while-statement - used for iteration when the end of a loop isn't clear or known.
    while (condition) { // do this }
