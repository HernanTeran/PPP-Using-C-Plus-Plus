-------
  Q's
-------

1. What is a computation?

2. What do we mean by inputs and outputs to a computation? Give examples.

3. What are the three requirements a programmer should keep in mind when expressing computations?

4. What does an expression do?

5. What is the difference between a statement and an expression?

6. What is an lvalue? List the operators that require an lvalue. Why do these operators, and not the others, require an lvalue?

7. What is a constant expression?

8. What is a literal?

9. What is a symbolic constant and why do we use them?

10. What is a magic constant? Give examples.

11. What are some operators that we can use for integers and floaing-point values?

12. What operators can be used on integers but not on floating-point numbers?

13. What are some operators that can be used for strings?

14. When would a programmer prefer a switch-statement to an if-statement?

15. What are some common problems with switch-statements?

16. What is the function of each part of the header line in a for-loop, and in what sequence are they executed?

17. When should the for-loop be used and when should the while-loop be used?

18. How do you print the numeric value of a char?

19. Describe what the line char foo(int x) means in a function definition?

20. When should you define a seperate function for part of a program? List reasons.

21. What can you do to an int that you cannot do to a string?

22. What can you do a string that you cannot do to an int?

23. What is the index of the third element of a vector?

24. How do you write a for-loop that prints every element of a vector?

25. What does vector<char>alphabet(26); do?

26. Describe what push_back() does to a vector.

27. What does vector's member size() do?

28. What makes vector so popular/useful?

29. How do you sort the elements of a vector?

-------
  A's
-------

1. Computation is taking input to produce output/a result.

2. Input is built up through data structures like functions which produces a result. This result eventually becomes external output.

3. The three requirements a programmer should keep in mind are that it's our job to express computations correctly, simply, and efficiently.

4. An expression computes a value from a number of operands using operators. The simplest expression is a literal.

5. A statement does not return a result but have side effects. Expressions return values. There are expression statements, declaration
   statements, selection statements, and iteration statements.

6. An lvalue is the variable, the name assigned to the object. The assignment operator, insertion/extraction, and composite assignment operators
   require an lvalue because they operate based off of assignment/initialization. 
   
7. Constant expressions are symbolic constants, a named object that you can't give a new value after it has been initialized. There are two types.
   constexpr - must be known at compile time / const - value is known at run time
   
8. A literal is the literal value of a type.

9. Symbolic constants, constexpr/const, are used to give a meaningful name to a constant and protect it from modification.

10. Magic constants are non-obvious literals (not including 0 or 1). Basically, ints or double not assigned to a variable.

11. ( + - * / ) and the conditional/logical operators

12. ( % ) the remainder/modolo operator won't work on floating point numbers. The / division operator truncates the result of double/int division.

13. ( + += ) for concatentation and the conditional/logical operators

14. Use a switch-statement if you're testing for more than 2 conditions. A switch-statement provides code that is easier to understand.

15. Some common problems with switch-statements are forgetting to terminate a case with a break statement, using a variable as a case label,
    trying to switch on a non-constant value, and writing case labels that aren't distinct.
    
16. for(loop variable, loop condition, loop increment/decrement) - execute the body starting at the control variable, incrementing/decrementing
    the variable if it meets the loop condition.
    
17. Use a for-loop if there is an initializer, loop condition, and increment operator otherwise use a while-loop.

18. Add 0 to the char variable/literal or assign the char variable to an int variable.

19. A function with a return value of type char that uses an int argument to as its numeric value to get the char value.

20. Functions make computation logically seperate from the rest of the program, makes the program text clearer especially because
    the computation is given a name, makes it possible to reuse the function in more than one place, and eases testing.

21. You can perform arithmetic operations with an int and use the remainder operator.

22. You can perform concatenation and use the string member functions with a string.

23. 2 because counting begins at 0 in C++

24. for (const auto& e : v) { cout << e << '\n'; } - range-for-loop

25. It allocates memory space for 26 chars.

26. push_back() pushes an element at the end of a vector.

27. size() returns the total count of elements in the vector.

28. Vectors are easy to use, you don't need to specify the size(length) of a vector in advance, and you can add as many elements as you like.

29. You sort a vector by using the sort algorithm from the C++ standard library. std::sort(v.begin(), v.end());

---------------------------------------
What should I be able to understand/do?
---------------------------------------
know the difference between a statement and an expression
know what constexpr and const is
know what magic constants are and why to avoid them
understand functions and how to return by value
know what lvalues and rvalues are and what operations can/can't be performed on them
know what a switch is and why to prefer it over if/else
know what a for-loop is and how to use it
know what a while-loop is and how to use it
know string member functions
know what a vector is and how to use one
void functions and how and why to use them with vectors
know range-for loop
know what the sort algorithm is
know what the find algorithm is
know what iterators are
know what the dereference operator is
